"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[570],{9928:function(e,r){r.Z={page:"RlzX",link:"vzUU",referenceHighlighter:"ug4B"}},7570:function(e,r,a){a.r(r),a.d(r,{default:function(){return h}});var n=a(8993),t=a(1568),i={filename:"ValidateSchema.ts",code:"import { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\n\r\nconst confirmPassword = () => (\r\n  (confirmPasswordValue: string, schema: Schema) => {\r\n    if (confirmPasswordValue === schema.password) return false;\r\n    return 'Passwords mismatched.';\r\n  }\r\n);\r\n\r\nconst required = () => (\r\n  (value: string) => {\r\n    if (value?.trim()) return false;\r\n    return 'The value is required.';\r\n  }\r\n);\r\n\r\nconst minLength = (min: number) => (\r\n  (value: string) => {\r\n    if (value.length >= min) return false;\r\n    return `The value must be ${min} symbols at least.`;\r\n  }\r\n);\r\n\r\nexport class Schema extends FormSchema {\r\n  @validate(required(), minLength(8))\r\n  @watch password = '';\r\n\r\n  @validate(required(), confirmPassword())\r\n  @watch confirmPassword = '';\r\n}\r\n"},o={filename:"ValidateIfSchema.ts",code:"import { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\n\r\nconst defined = () => (\r\n  (value?: unknown) => {\r\n    if (value !== null && value !== undefined) return false;\r\n    return 'The value is required.';\r\n  }\r\n);\r\n\r\nconst email = () => (value: string) => {\r\n  if (/\\S+@\\S+\\.\\S+/.test(value)) return false;\r\n  return 'Invalid email format.';\r\n};\r\n\r\nconst shouldValidateAge = (_: unknown, schema: Schema) => schema.wantToShareAge;\r\n\r\nexport class Schema extends FormSchema {\r\n  @validate.if(Boolean, [email()])\r\n  @watch optionalEmail = '';\r\n\r\n  @validate.if(shouldValidateAge, [defined()])\r\n  @watch age: number | undefined = undefined;\r\n\r\n  @watch wantToShareAge = true;\r\n}\r\n"},l={filename:"validateIfDeclaration.ts",code:"type FieldOrGetDecoratorWithContext<This, Result> = /* Declared dynamically */ any;\r\n\r\ntype TValidationCondition<This, Value> = (value: Value, schema: This) => boolean;\r\ntype TValidator<This, Value> = (value: Value, schema: This) => string | boolean;\r\ntype TValidators<This, Value> = [TValidator<This, Value>, ...TValidator<This, Value>[]];\r\n\r\nexport interface Validate {\r\n  if<This, Value>(\r\n    condition: TValidationCondition<This, Value>,\r\n    validators: TValidators<This, Value>,\r\n  ): FieldOrGetDecoratorWithContext<This, Value>\r\n}\r\n"},d={filename:"validateDeclaration.ts",code:"type FieldOrGetDecoratorWithContext<This, Result> = /* Declared dynamically */ any;\r\n\r\ntype TValidator<This, Value> = (value: Value, schema: This) => string | boolean;\r\ntype TValidators<This, Value> = [TValidator<This, Value>, ...TValidator<This, Value>[]];\r\n\r\nexport interface Validate {\r\n  <This, Value>(\r\n    ...validators: TValidators<This, Value>\r\n  ): FieldOrGetDecoratorWithContext<This, Value>;\r\n}\r\n"},s=a(9928);let c=()=>(0,n.BX)(n.HY,{children:[(0,n.BX)(t.$0,{title:(0,n.BX)(n.HY,{children:["The ",(0,n.tZ)(t.EK,{children:"@validate"})," decorator"]}),children:[(0,n.BX)(t.xv,{children:["The ",(0,n.tZ)(t.EK,{children:"@validate"})," decorator allows you to add some validation rules for desired properties in a schema. After you use this decorator, you can use the ",(0,n.tZ)(t.EK,{children:"isValid"})," in order to understand if the entire form is valid and the ",(0,n.tZ)(t.EK,{children:"errors"})," object in order to get a validation error message for each property separately."]}),(0,n.tZ)(t.xv,{children:"API reference:"}),(0,n.tZ)(t.oP,{className:s.Z.referenceHighlighter,code:d.code}),(0,n.BX)(t.$0,{title:"Validation rules",children:[(0,n.BX)(t.xv,{children:["In order to use the ",(0,n.tZ)(t.EK,{children:"@validate"})," decorator, you have to pass validation rules. MobX Form Schema does not provide any out-of-box rules, so you have to create your own."]}),(0,n.tZ)(t.xv,{children:"Validation rule is a function, which takes receives 2 arguments:"}),(0,n.BX)(t.aV,{variant:"ol",children:[(0,n.tZ)("li",{children:"A current value of a property;"}),(0,n.tZ)("li",{children:"An entire schema."})]})]}),(0,n.tZ)(t.$0,{title:(0,n.BX)(n.HY,{children:["Example of using the ",(0,n.tZ)(t.EK,{children:"@validate"})," decorator"]}),children:(0,n.tZ)(t.KE,{items:[i]})})]}),(0,n.BX)(t.$0,{title:(0,n.BX)(n.HY,{children:["The ",(0,n.tZ)(t.EK,{children:"@validate.if"})," decorator"]}),children:[(0,n.BX)(t.xv,{children:["The ",(0,n.tZ)(t.EK,{children:"@validate.if"})," decorator works the same as ",(0,n.tZ)(t.EK,{children:"@validate"}),", but it also provides an opportunity to create a conditional validation."]}),(0,n.tZ)(t.xv,{children:"Sometimes you may want to stop the validation of a property. For example, there's no need to validate an empty optional field. And that's where conditional validation can help."}),(0,n.tZ)(t.xv,{children:"API reference:"}),(0,n.tZ)(t.oP,{code:l.code,className:s.Z.referenceHighlighter}),(0,n.tZ)(t.xv,{children:"A validation condition rule receives the exact same arguments as validation rules."}),(0,n.BX)(t.xv,{children:["If a validation condition function returns ",(0,n.tZ)(t.EK,{children:"false"}),", the property is considered to be valid. If ",(0,n.tZ)(t.EK,{children:"true"}),", the validation is applied."]}),(0,n.tZ)(t.$0,{title:(0,n.BX)(n.HY,{children:["Example of using the ",(0,n.tZ)(t.EK,{children:"@validate.if"})," decorator"]}),children:(0,n.tZ)(t.KE,{items:[o]})})]})]});var h=c}}]);