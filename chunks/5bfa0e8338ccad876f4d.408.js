"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[408],{3408:function(e,r,t){t.r(r),t.d(r,{default:function(){return h}});var s=t(8993),a=t(1568),n={filename:"NestedSchemaSchema.ts",code:"import { FormSchema, nestedSchema } from '@yoskutik/mobx-form-schema';\r\n\r\nclass NestedSchema extends FormSchema {\r\n  prop1 = 1;\r\n}\r\n\r\nexport class NestedSchemaSchema extends FormSchema {\r\n  // Just an alias for this:\r\n  //  @validate(schema => !schema.isValid)\r\n  //  @watch.schema\r\n  //  @factory.schema(NestedSchema)\r\n  //  @presentation(schema => schema.presentation)\r\n  @nestedSchema(NestedSchema)\r\n  prop1 = NestedSchema.create();\r\n}\r\n"};let c=()=>(0,s.BX)(a.$0,{title:(0,s.BX)(s.HY,{children:["The ",(0,s.tZ)(a.EK,{children:"@nestedSchema"})," decorator"]}),children:[(0,s.BX)(a.xv,{children:["The ",(0,s.tZ)(a.EK,{children:"@nestedSchema"})," decorator is just a sugar to improve your developer experience. Usually, when you use nested form schemas, you have to:"]}),(0,s.BX)(a.aV,{children:[(0,s.tZ)("li",{children:"Use a factory for initializing form schema from plain objects;"}),(0,s.tZ)("li",{children:"Use validation in order to understand if the nested schema is valid;"}),(0,s.tZ)("li",{children:"Use observation in order to understand if the nested schema is changed;"}),(0,s.tZ)("li",{children:"Use presentation in order to present the nested schema's data."})]}),(0,s.BX)(a.xv,{children:["The ",(0,s.tZ)(a.EK,{children:"@nestedSchema"})," receives a class of the nested form schema for the desired property."]}),(0,s.tZ)(a.$0,{title:"Example of usage",children:(0,s.tZ)(a.KE,{items:[n]})})]});var h=c}}]);