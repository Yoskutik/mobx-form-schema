"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[21],{9928:function(e,r){r.Z={page:"RlzX",link:"vzUU",referenceHighlighter:"ug4B"}},1021:function(e,r,a){a.r(r),a.d(r,{default:function(){return l}});var t=a(8993),c=a(1568),o={filename:"factoryDeclaration.ts",code:"import { ExcludedFormSchemaKeyToValue, FormSchema } from '@yoskutik/mobx-form-schema';\r\n\r\ntype FieldDecoratorWithContext<This, Result> = /* Declared dynamically */ any;\r\n\r\ntype TFactoryData<This extends Omit<FormSchema, 'changedProperties' | 'getInitial'>> =\r\n  | ExcludedFormSchemaKeyToValue<This, unknown>;\r\n\r\nexport type TFactory<This extends FormSchema, Value> = (\r\n  value: any,\r\n  data: TFactoryData<This>,\r\n  schema: This,\r\n  defaultValue: Value,\r\n) => Value;\r\n\r\nexport interface Factory {\r\n  <This extends FormSchema, Value>(\r\n    factory: TFactory<This, Value>\r\n  ): FieldDecoratorWithContext<This, Value>;\r\n}\r\n"},n={filename:"FactorySchema.ts",code:"import { factory, FormSchema, TFactoryData } from '@yoskutik/mobx-form-schema';\r\n\r\nconst createProp1 = (prop1Value: number) => prop1Value * 10;\r\n\r\nconst createProp2 = (prop2Value: number, data: TFactoryData<FactorySchema>) => (\r\n  prop2Value * 100 + data.prop1\r\n);\r\n\r\nconst createProp3 = (\r\n  prop3Value: string,\r\n  _data: TFactoryData<FactorySchema>,\r\n  _schema: FactorySchema,\r\n  defaultValue: string,\r\n) => prop3Value ?? defaultValue;\r\n\r\nexport class FactorySchema extends FormSchema {\r\n  @factory(createProp1)\r\n  prop1 = 1;\r\n\r\n  @factory(createProp2)\r\n  prop2 = 2;\r\n\r\n  @factory(createProp3)\r\n  prop3 = 'Default value';\r\n}\r\n\r\nconst schema1 = FactorySchema.create({\r\n  prop1: 10,\r\n  prop2: 20,\r\n  prop3: 'prop3 new value',\r\n});\r\n\r\nconsole.log(schema1.prop1, schema1.prop2, schema1.prop3);\r\n// 100, 2010, 'prop3 new value'\r\n\r\nconst schema2 = FactorySchema.create({\r\n  prop1: -10,\r\n  prop2: 5,\r\n});\r\n\r\nconsole.log(schema2.prop1, schema2.prop2, schema2.prop3);\r\n// -100, 490, 'Default value'\r\n"},s={filename:"FactorySetSchema.ts",code:"import { factory, FormSchema } from '@yoskutik/mobx-form-schema';\r\n\r\nexport class FactorySchema extends FormSchema {\r\n  @factory.set // same as @factory(data => new Set(data))\r\n  prop1 = new Set([1, 2, 3]);\r\n\r\n  prop2 = new Set([1, 2, 3]);\r\n}\r\n\r\nconst schema = FactorySchema.create({\r\n  prop1: [1, 2, 3],\r\n  prop2: [1, 2, 3],\r\n});\r\n\r\nconsole.log(schema.prop1, schema.prop2);\r\n// Set([1, 2, 3]), [1, 2, 3]\r\n"},h={filename:"FactorySchemaSchema.ts",code:"import { factory, FormSchema } from '@yoskutik/mobx-form-schema';\r\n\r\nclass NestedSchema extends FormSchema {\r\n  prop1 = 1;\r\n}\r\n\r\nexport class FactorySchema extends FormSchema {\r\n  @factory.schema(NestedSchema)\r\n  nestedSchema1 = NestedSchema.create();\r\n\r\n  nestedSchema2 = NestedSchema.create();\r\n}\r\n\r\nconst schema = FactorySchema.create({\r\n  nestedSchema1: { prop1: 10 },\r\n  nestedSchema2: { prop1: 10 },\r\n});\r\n\r\nconsole.log(schema.nestedSchema1 instanceof NestedSchema); // true\r\nconsole.log(schema.nestedSchema2 instanceof NestedSchema); // false\r\n"},i={filename:"FactorySchemasArraySchema.ts",code:"import { factory, FormSchema } from '@yoskutik/mobx-form-schema';\r\n\r\nclass NestedSchema extends FormSchema {\r\n  prop1 = 1;\r\n}\r\n\r\nexport class FactorySchema extends FormSchema {\r\n  @factory.schemasArray(NestedSchema)\r\n  nestedSchema1 = [NestedSchema.create()];\r\n\r\n  nestedSchema2 = [NestedSchema.create()];\r\n}\r\n\r\nconst schema = FactorySchema.create({\r\n  nestedSchema1: [{ prop1: 10 }],\r\n  nestedSchema2: [{ prop1: 10 }],\r\n});\r\n\r\nconsole.log(schema.nestedSchema1[0] instanceof NestedSchema); // true\r\nconsole.log(schema.nestedSchema2[0] instanceof NestedSchema); // false\r\n"},m=a(9928);let d=()=>(0,t.BX)(t.HY,{children:[(0,t.BX)(c.$0,{title:(0,t.BX)(t.HY,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory"})," decorator"]}),children:[(0,t.BX)(c.xv,{children:["You can create your schemas with pre-filled data, e.g. from a backend response. To do it, you have to pass the data into the ",(0,t.tZ)(c.EK,{children:"create"})," static method of the schema. By default, values from the passed object are applied directly. But you can describe how such values must be preprocessed before being assigned. All you have to do is use the ",(0,t.tZ)(c.EK,{children:"@factory"})," decorator."]}),(0,t.tZ)(c.xv,{children:"API reference:"}),(0,t.tZ)(c.oP,{className:m.Z.referenceHighlighter,code:o.code}),(0,t.BX)(c.xv,{children:["The ",(0,t.tZ)(c.EK,{children:"factory"})," receives a function, which receives 4 arguments:"]}),(0,t.BX)(c.aV,{variant:"ol",children:[(0,t.BX)("li",{children:["A value from the object, which is passed to the ",(0,t.tZ)(c.EK,{children:"create"})," static method for the desired property."]}),(0,t.BX)("li",{children:["An entire object, which is passed to the ",(0,t.tZ)(c.EK,{children:"create"})," static method."]}),(0,t.tZ)("li",{children:"A form schema in its current state. Be careful using this argument, the schema hasn't finished filling in the data while being pre-processed."}),(0,t.tZ)("li",{children:"A default value of a property that is declared in a schema."})]}),(0,t.tZ)(c.$0,{title:"Example of usage",children:(0,t.tZ)(c.KE,{items:[n]})})]}),(0,t.BX)(c.$0,{title:(0,t.BX)(t.HY,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.set"})," decorator"]}),children:[(0,t.BX)(c.xv,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.set"})," is a modification of the ",(0,t.tZ)(c.EK,{children:"@factory"})," decorator, which must be used in order to create sets from the data object."]}),(0,t.BX)(c.xv,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.set"})," is just a decorator and does not receive any arguments."]}),(0,t.BX)(c.xv,{children:["After you apply the ",(0,t.tZ)(c.EK,{children:"@factory.set"})," decorator, you can pass arrays into the ",(0,t.tZ)(c.EK,{children:"create"})," static method, and MobX Form Schema will create a set using the passed array."]}),(0,t.tZ)(c.$0,{title:"Example of usage",children:(0,t.tZ)(c.KE,{items:[s]})})]}),(0,t.BX)(c.$0,{title:(0,t.BX)(t.HY,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.schema"})," decorator"]}),children:[(0,t.BX)(c.xv,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.schema"})," is a modification of the ",(0,t.tZ)(c.EK,{children:"@factory"})," decorator, which must be used in order to create nested schemas from the data object."]}),(0,t.BX)(c.xv,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.schema"})," receives a class of the nested form schema for the desired property."]}),(0,t.BX)(c.xv,{children:["After you apply the ",(0,t.tZ)(c.EK,{children:"@factory.schema"})," decorator, you can pass a plain object into the ",(0,t.tZ)(c.EK,{children:"create"})," static method, and MobX Form Schema will create a valid nested form schema instance using the passed plain object."]}),(0,t.tZ)(c.$0,{title:"Example of usage",children:(0,t.tZ)(c.KE,{items:[h]})})]}),(0,t.BX)(c.$0,{title:(0,t.BX)(t.HY,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.schemasArray"})," decorator"]}),children:[(0,t.BX)(c.xv,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.schemasArray"})," is a modification of the ",(0,t.tZ)(c.EK,{children:"@factory"})," decorator, which must be used in order to create arrays of nested schemas from the data object."]}),(0,t.BX)(c.xv,{children:["The ",(0,t.tZ)(c.EK,{children:"@factory.schemas"})," receives a class of the nested form schema for the desired property."]}),(0,t.BX)(c.xv,{children:["After you apply the ",(0,t.tZ)(c.EK,{children:"@factory.schemasArray"})," decorator, you can pass an array of plain objects into the ",(0,t.tZ)(c.EK,{children:"create"})," static method, and MobX Form Schema will create an array of valid form schema instances using the passed array."]}),(0,t.tZ)(c.$0,{title:"Example of usage",children:(0,t.tZ)(c.KE,{items:[i]})})]})]});var l=d}}]);