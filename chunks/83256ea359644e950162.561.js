"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[561],{2561:function(e,t,r){let n,a,o,i,s,c,d,m,l,h,u,f,p,y,v,S,b;r.r(t),r.d(t,{default:function(){return eh}});var k,x,g,B=r(8993),w=r(1568),C={filename:"BasicSchema.ts",code:"import { FormSchema } from '@yoskutik/mobx-form-schema';\r\n\r\nexport class BasicSchema extends FormSchema {\r\n  set: Set<number> | undefined = undefined;\r\n\r\n  date: Date | undefined = undefined;\r\n}\r\n"},Z={filename:"BasicExample.tsx",code:"import { observer } from 'mobx-react';\r\nimport { useState } from 'react';\r\nimport { BasicSchema } from './BasicSchema';\r\nimport { Button } from '@components';\r\n\r\nconst dataMock = {\r\n  set: new Set([0, 1, 2]),\r\n  date: new Date(),\r\n};\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst fakeGetData = () => sleep(500).then(() => dataMock);\r\n\r\nexport const BasicExample = observer(() => {\r\n  const [schema, setSchema] = useState(() => BasicSchema.create());\r\n\r\n  const handleGetDataClick = () => fakeGetData()\r\n    .then(data => setSchema(BasicSchema.create(data)));\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(schema).map(key => (\r\n        <div key={key}>\r\n          Constructor of \"{key}\" is {' '}\r\n          {schema[key] !== undefined ? schema[key].constructor.name : 'not defined'}\r\n        </div>\r\n      ))}\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <Button variant=\"primary\" onClick={handleGetDataClick}>\r\n          Get data\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n"},E={filename:"FactoryBasicExample.tsx",code:"import { observer } from 'mobx-react';\r\nimport { useState } from 'react';\r\nimport { BasicSchema } from './BasicSchema';\r\nimport { Button } from '@components';\r\nimport { FactoryBasicSchema } from '@pages/learn/data-process/Initialization/FactoryBasicSchema';\r\n\r\nconst dataMock = {\r\n  set: [0, 1, 2],\r\n  date: '2023-01-01T00:00:00.000Z',\r\n};\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst fakeGetData = () => sleep(500).then(() => dataMock);\r\n\r\nexport const FactoryBasicExample = observer(() => {\r\n  const [MainSchema, setMainSchema] = useState(() => BasicSchema);\r\n  const [schema, setSchema] = useState(() => MainSchema.create());\r\n\r\n  const handleGetDataClick = () => fakeGetData()\r\n    .then(data => setSchema(MainSchema.create(data)));\r\n\r\n  const handleSwitchClick = () => {\r\n    setMainSchema(() => MainSchema === BasicSchema ? FactoryBasicSchema : BasicSchema);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(schema).map(key => (\r\n        <div key={key}>\r\n          Constructor of \"{key}\" is {' '}\r\n          {schema[key] !== undefined ? schema[key].constructor.name : 'not defined'}\r\n        </div>\r\n      ))}\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        Current schema: {MainSchema.name}\r\n      </div>\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <Button variant=\"primary\" onClick={handleGetDataClick}>\r\n          Get data\r\n        </Button>\r\n        <Button variant=\"primary\" onClick={handleSwitchClick} style={{ marginLeft: 12 }}>\r\n          Switch schemas\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n"},D={filename:"ModifiersSchema.ts",code:"import { factory, FormSchema } from '@yoskutik/mobx-form-schema';\r\n\r\nclass NestedSchema extends FormSchema {\r\n  prop1 = 1;\r\n}\r\n\r\nexport class ModifiersSchema extends FormSchema {\r\n  @factory.set\r\n  set: Set<number> | undefined = undefined;\r\n\r\n  @factory.schema(NestedSchema)\r\n  nestedSchema: NestedSchema | undefined = undefined;\r\n\r\n  @factory.schemasArray(NestedSchema)\r\n  nestedSchemasArray: NestedSchema[] | undefined = undefined;\r\n}\r\n"},T={filename:"ModifiersExample.tsx",code:"import { observer } from 'mobx-react';\r\nimport { useState } from 'react';\r\nimport { BasicSchema } from './BasicSchema';\r\nimport { Button } from '@components';\r\nimport { ModifiersSchema } from '@pages/learn/data-process/Initialization/ModifiersSchema';\r\n\r\nconst dataMock = {\r\n  set: [0, 1, 2],\r\n  nestedSchema: {\r\n    prop1: 1,\r\n  },\r\n  nestedSchemasArray: [\r\n    { prop1: 2 },\r\n    { prop1: 3 },\r\n  ],\r\n};\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst fakeGetData = () => sleep(500).then(() => dataMock);\r\n\r\nexport const ModifiersExample = observer(() => {\r\n  const [schema, setSchema] = useState(() => ModifiersSchema.create());\r\n\r\n  const handleGetDataClick = () => fakeGetData()\r\n    .then(data => setSchema(ModifiersSchema.create(data)));\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(schema).map(key => (\r\n        <div key={key}>\r\n          Constructor of \"{key}\" is {' '}\r\n          {schema[key] !== undefined ? schema[key].constructor.name : 'not defined'}\r\n        </div>\r\n      ))}\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <Button variant=\"primary\" onClick={handleGetDataClick}>\r\n          Get data\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n"},X={filename:"ComplexSchema.ts",code:"import { factory, FormSchema, TFactoryData } from '@yoskutik/mobx-form-schema';\r\n\r\nconst createFullName = (\r\n  _: unknown,\r\n  data: TFactoryData<ComplexSchema>,\r\n  _schema: ComplexSchema,\r\n  defaultValue: string,\r\n) => (\r\n  `${data.name || ''} ${data.surname || ''}`.trim() || defaultValue\r\n);\r\n\r\nexport class ComplexSchema extends FormSchema {\r\n  name: string | undefined = '';\r\n\r\n  surname: string | undefined = '';\r\n\r\n  @factory(createFullName)\r\n  fullName: string | undefined = 'Default full name';\r\n}\r\n"},F={filename:"ComplexExample.tsx",code:"import { observer } from 'mobx-react';\r\nimport { useState } from 'react';\r\nimport { Button } from '@components';\r\nimport { ComplexSchema } from './ComplexSchema';\r\n\r\nconst dataMock = {\r\n  name: 'Joe',\r\n  surname: 'Dough',\r\n};\r\n\r\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst fakeGetData = () => sleep(500).then(() => dataMock);\r\n\r\nexport const ComplexExample = observer(() => {\r\n  const [schema, setSchema] = useState(() => ComplexSchema.create());\r\n\r\n  const handleGetDataClick = () => fakeGetData()\r\n    .then(data => setSchema(ComplexSchema.create(data)));\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ whiteSpace: 'pre' }}>\r\n        {JSON.stringify(schema, undefined, 2)}\r\n      </div>\r\n\r\n      <div style={{ marginTop: 12 }}>\r\n        <Button variant=\"primary\" onClick={handleGetDataClick}>\r\n          Get data\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n"},j=r(4309),O=r(8379),P=r(8816);class A extends P.FormSchema{constructor(){super(...arguments),this.set=void 0,this.date=void 0}}let M={set:new Set([0,1,2]),date:new Date},G=e=>new Promise(t=>setTimeout(t,e)),K=()=>G(500).then(()=>M),N=(0,j.Pi)(()=>{let[e,t]=(0,O.useState)(()=>A.create()),r=()=>K().then(e=>t(A.create(e)));return(0,B.BX)("div",{children:[Object.keys(e).map(t=>(0,B.BX)("div",{children:['Constructor of "',t,'" is '," ",void 0!==e[t]?e[t].constructor.name:"not defined"]},t)),(0,B.tZ)("div",{style:{marginTop:12},children:(0,B.tZ)(w.zx,{variant:"primary",onClick:r,children:"Get data"})})]})});var I=function(e,t,r,n,a,o){function i(e){if(void 0!==e&&"function"!=typeof e)throw TypeError("Function expected");return e}for(var s,c=n.kind,d="getter"===c?"get":"setter"===c?"set":"value",m=!t&&e?n.static?e:e.prototype:null,l=t||(m?Object.getOwnPropertyDescriptor(m,n.name):{}),h=!1,u=r.length-1;u>=0;u--){var f={};for(var p in n)f[p]="access"===p?{}:n[p];for(var p in n.access)f.access[p]=n.access[p];f.addInitializer=function(e){if(h)throw TypeError("Cannot add initializers after decoration has completed");o.push(i(e||null))};var y=(0,r[u])("accessor"===c?{get:l.get,set:l.set}:l[d],f);if("accessor"===c){if(void 0===y)continue;if(null===y||"object"!=typeof y)throw TypeError("Object expected");(s=i(y.get))&&(l.get=s),(s=i(y.set))&&(l.set=s),(s=i(y.init))&&a.unshift(s)}else(s=i(y))&&("field"===c?a.unshift(s):l[d]=s)}m&&Object.defineProperty(m,n.name,l),h=!0},z=function(e,t,r){for(var n=arguments.length>2,a=0;a<t.length;a++)r=n?t[a].call(e,r):t[a].call(e);return n?r:void 0};let _=e=>new Set(e),$=e=>new Date(e),J=(o=P.FormSchema,i=[],s=[],c=[],k=class extends o{constructor(){super(...arguments),this.set=(z(this,i),z(this,s,void 0)),this.date=z(this,c,void 0)}},(()=>{var e;let t="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(e=o[Symbol.metadata])&&void 0!==e?e:null):void 0;n=[(0,P.factory)(_)],a=[(0,P.factory)($)],I(null,null,n,{kind:"field",name:"set",static:!1,private:!1,access:{has:e=>"set"in e,get:e=>e.set,set:(e,t)=>{e.set=t}},metadata:t},s,i),I(null,null,a,{kind:"field",name:"date",static:!1,private:!1,access:{has:e=>"date"in e,get:e=>e.date,set:(e,t)=>{e.date=t}},metadata:t},c,i),t&&Object.defineProperty(k,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:t})})(),k),L={set:[0,1,2],date:"2023-01-01T00:00:00.000Z"},q=e=>new Promise(t=>setTimeout(t,e)),V=()=>q(500).then(()=>L),Y=(0,j.Pi)(()=>{let[e,t]=(0,O.useState)(()=>A),[r,n]=(0,O.useState)(()=>e.create()),a=()=>V().then(t=>n(e.create(t))),o=()=>{t(()=>e===A?J:A)};return(0,B.BX)("div",{children:[Object.keys(r).map(e=>(0,B.BX)("div",{children:['Constructor of "',e,'" is '," ",void 0!==r[e]?r[e].constructor.name:"not defined"]},e)),(0,B.BX)("div",{style:{marginTop:12},children:["Current schema: ",e.name]}),(0,B.BX)("div",{style:{marginTop:12},children:[(0,B.tZ)(w.zx,{variant:"primary",onClick:a,children:"Get data"}),(0,B.tZ)(w.zx,{variant:"primary",onClick:o,style:{marginLeft:12},children:"Switch schemas"})]})]})});var H=function(e,t,r,n,a,o){function i(e){if(void 0!==e&&"function"!=typeof e)throw TypeError("Function expected");return e}for(var s,c=n.kind,d="getter"===c?"get":"setter"===c?"set":"value",m=!t&&e?n.static?e:e.prototype:null,l=t||(m?Object.getOwnPropertyDescriptor(m,n.name):{}),h=!1,u=r.length-1;u>=0;u--){var f={};for(var p in n)f[p]="access"===p?{}:n[p];for(var p in n.access)f.access[p]=n.access[p];f.addInitializer=function(e){if(h)throw TypeError("Cannot add initializers after decoration has completed");o.push(i(e||null))};var y=(0,r[u])("accessor"===c?{get:l.get,set:l.set}:l[d],f);if("accessor"===c){if(void 0===y)continue;if(null===y||"object"!=typeof y)throw TypeError("Object expected");(s=i(y.get))&&(l.get=s),(s=i(y.set))&&(l.set=s),(s=i(y.init))&&a.unshift(s)}else(s=i(y))&&("field"===c?a.unshift(s):l[d]=s)}m&&Object.defineProperty(m,n.name,l),h=!0},W=function(e,t,r){for(var n=arguments.length>2,a=0;a<t.length;a++)r=n?t[a].call(e,r):t[a].call(e);return n?r:void 0};class Q extends P.FormSchema{constructor(){super(...arguments),this.prop1=1}}let R=(h=P.FormSchema,u=[],f=[],p=[],y=[],x=class extends h{constructor(){super(...arguments),this.set=(W(this,u),W(this,f,void 0)),this.nestedSchema=W(this,p,void 0),this.nestedSchemasArray=W(this,y,void 0)}},(()=>{var e;let t="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(e=h[Symbol.metadata])&&void 0!==e?e:null):void 0;d=[(e=P.factory).set.bind(e)],m=[P.factory.schema(Q)],l=[P.factory.schemasArray(Q)],H(null,null,d,{kind:"field",name:"set",static:!1,private:!1,access:{has:e=>"set"in e,get:e=>e.set,set:(e,t)=>{e.set=t}},metadata:t},f,u),H(null,null,m,{kind:"field",name:"nestedSchema",static:!1,private:!1,access:{has:e=>"nestedSchema"in e,get:e=>e.nestedSchema,set:(e,t)=>{e.nestedSchema=t}},metadata:t},p,u),H(null,null,l,{kind:"field",name:"nestedSchemasArray",static:!1,private:!1,access:{has:e=>"nestedSchemasArray"in e,get:e=>e.nestedSchemasArray,set:(e,t)=>{e.nestedSchemasArray=t}},metadata:t},y,u),t&&Object.defineProperty(x,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:t})})(),x),U={set:[0,1,2],nestedSchema:{prop1:1},nestedSchemasArray:[{prop1:2},{prop1:3}]},ee=e=>new Promise(t=>setTimeout(t,e)),et=()=>ee(500).then(()=>U),er=(0,j.Pi)(()=>{let[e,t]=(0,O.useState)(()=>R.create()),r=()=>et().then(e=>t(R.create(e)));return(0,B.BX)("div",{children:[Object.keys(e).map(t=>(0,B.BX)("div",{children:['Constructor of "',t,'" is '," ",void 0!==e[t]?e[t].constructor.name:"not defined"]},t)),(0,B.tZ)("div",{style:{marginTop:12},children:(0,B.tZ)(w.zx,{variant:"primary",onClick:r,children:"Get data"})})]})});var en=function(e,t,r){for(var n=arguments.length>2,a=0;a<t.length;a++)r=n?t[a].call(e,r):t[a].call(e);return n?r:void 0},ea=function(e,t,r,n,a,o){function i(e){if(void 0!==e&&"function"!=typeof e)throw TypeError("Function expected");return e}for(var s,c=n.kind,d="getter"===c?"get":"setter"===c?"set":"value",m=!t&&e?n.static?e:e.prototype:null,l=t||(m?Object.getOwnPropertyDescriptor(m,n.name):{}),h=!1,u=r.length-1;u>=0;u--){var f={};for(var p in n)f[p]="access"===p?{}:n[p];for(var p in n.access)f.access[p]=n.access[p];f.addInitializer=function(e){if(h)throw TypeError("Cannot add initializers after decoration has completed");o.push(i(e||null))};var y=(0,r[u])("accessor"===c?{get:l.get,set:l.set}:l[d],f);if("accessor"===c){if(void 0===y)continue;if(null===y||"object"!=typeof y)throw TypeError("Object expected");(s=i(y.get))&&(l.get=s),(s=i(y.set))&&(l.set=s),(s=i(y.init))&&a.unshift(s)}else(s=i(y))&&("field"===c?a.unshift(s):l[d]=s)}m&&Object.defineProperty(m,n.name,l),h=!0};let eo=(e,t,r,n)=>`${t.name||""} ${t.surname||""}`.trim()||n,ei=(v=P.FormSchema,S=[],b=[],g=class extends v{constructor(){super(...arguments),this.name=(en(this,S),""),this.surname="",this.fullName=en(this,b,"Default full name")}},(()=>{var e;let t="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(e=v[Symbol.metadata])&&void 0!==e?e:null):void 0;ea(null,null,[(0,P.factory)(eo)],{kind:"field",name:"fullName",static:!1,private:!1,access:{has:e=>"fullName"in e,get:e=>e.fullName,set:(e,t)=>{e.fullName=t}},metadata:t},b,S),t&&Object.defineProperty(g,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:t})})(),g),es={name:"Joe",surname:"Dough"},ec=e=>new Promise(t=>setTimeout(t,e)),ed=()=>ec(500).then(()=>es),em=(0,j.Pi)(()=>{let[e,t]=(0,O.useState)(()=>ei.create()),r=()=>ed().then(e=>t(ei.create(e)));return(0,B.BX)("div",{children:[(0,B.tZ)("div",{style:{whiteSpace:"pre"},children:JSON.stringify(e,void 0,2)}),(0,B.tZ)("div",{style:{marginTop:12},children:(0,B.tZ)(w.zx,{variant:"primary",onClick:r,children:"Get data"})})]})}),el=()=>(0,B.BX)(B.HY,{children:[(0,B.BX)(w.$0,{title:"Form data pre-process: Initialization",children:[(0,B.BX)(w.xv,{children:["As you may have noticed earlier, with MobX Form Schema, you can not only describe your forms with schemas but also fill in these schemas with some data. In order to do it, you have to pass an object into the ",(0,B.tZ)(w.EK,{children:"create"})," static method."]}),(0,B.BX)(w.xv,{children:["Look at the example below. By default, this schema's values are undefined, and they must be defined only by the API response. You emulate an API request by clicking ",(0,B.tZ)("i",{children:'"Get data"'})," button."]}),(0,B.tZ)(w.KE,{items:[C,Z],children:(0,B.tZ)(N,{})}),(0,B.BX)(w.$0,{title:"Data pre-process",children:[(0,B.BX)(w.xv,{children:["But here's a problem: you cannot get the ",(0,B.tZ)(w.EK,{children:"Set"})," or the ",(0,B.tZ)(w.EK,{children:"Date"})," objects from an API request because of the JSON syntax. And usually, developers somehow pre-process the received data before using it. But MobX Form Schema can simplify this process with the ",(0,B.tZ)(w.EK,{children:"@factory"})," decorator."]}),(0,B.BX)(w.xv,{children:["With MobX Form Schema, you can use the ",(0,B.tZ)(w.EK,{children:"@factory"})," decorator if you want to pre-process a specific property in a schema."]}),(0,B.BX)(w.xv,{children:["In the example below, the API response mock is the same as it would be on the real backend. And you can see that even though we've specified that the type of the ",(0,B.tZ)("i",{children:'"set"'})," property is ",(0,B.tZ)(w.EK,{children:"Date"}),", the real value is actually an array, because the schema receives an array from the mocked API request. But if we switch to using ",(0,B.tZ)(w.EK,{children:"FactoryBasicSchema"})," instead of ",(0,B.tZ)(w.EK,{children:"BasicSchema"})," everything will start to work as intended."]}),(0,B.tZ)(w.KE,{items:[E,C,Z],children:(0,B.tZ)(Y,{})})]}),(0,B.BX)(w.$0,{title:"Factory decorators modifiers",children:[(0,B.BX)(w.xv,{children:["Like in the ",(0,B.tZ)(w.EK,{children:"@watch"})," decorator, ",(0,B.tZ)(w.EK,{children:"@factory"})," also has a few modifiers to simplify the process of development. You can use:"]}),(0,B.BX)(w.aV,{children:[(0,B.BX)("li",{children:[(0,B.tZ)(w.EK,{children:"@factory.set"})," in order to create ",(0,B.tZ)(w.EK,{children:"Set"}),";"]}),(0,B.BX)("li",{children:[(0,B.tZ)(w.EK,{children:"@factory.schema"})," in order to create nested form schema;"]}),(0,B.BX)("li",{children:[(0,B.tZ)(w.EK,{children:"@factory.schemasArray"})," in order to create array of nested form schemas;"]})]}),(0,B.BX)(w.xv,{children:["As you see in the example below, a mocked API request returns only plain objects, arrays or numbers. But because of the ",(0,B.tZ)(w.EK,{children:"@factory"})," decorator, they convert into data of the needed types."]}),(0,B.tZ)(w.KE,{items:[D,T],children:(0,B.tZ)(er,{})})]}),(0,B.BX)(w.$0,{title:"Complex factory functions",children:[(0,B.BX)(w.xv,{children:["A function passed into the ",(0,B.tZ)(w.EK,{children:"@factory"})," decorator receives 2 arguments:"]}),(0,B.BX)(w.aV,{variant:"ol",children:[(0,B.tZ)("li",{children:"A property's value before pre-processing;"}),(0,B.BX)("li",{children:["An object passed into the ",(0,B.tZ)(w.EK,{children:"create"})," static method;"]}),(0,B.tZ)("li",{children:"A form schema object;"}),(0,B.tZ)("li",{children:"A default value for a property (the one that is declared in a class)."})]}),(0,B.tZ)(w.xv,{children:"So, if some of your properties must be initialized using a few other properties from the schema, you can use this second argument."}),(0,B.tZ)(w.KE,{items:[X,F],children:(0,B.tZ)(em,{})})]})]}),(0,B.tZ)(w.$0,{title:"Next",forcedLevel:3,children:(0,B.tZ)(w.xv,{children:"In this section, you saw how to observe primitive data. In the next article, you'll find out how to configure your form schema in order to use arrays, sets or nested schemas."})})]});var eh=el}}]);