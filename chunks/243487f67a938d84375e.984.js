"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[984],{9928:function(e,r){r.Z={page:"RlzX",link:"vzUU",referenceHighlighter:"ug4B"}},1984:function(e,r,t){t.r(r),t.d(r,{default:function(){return u}});var n=t(8993),c=t(1568),o={filename:"IsChanged.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\nimport { reaction } from 'mobx';\r\n\r\nexport class IsChangedSchema extends FormSchema {\r\n  @watch prop1 = 1;\r\n\r\n  @watch prop2 = 2;\r\n\r\n  protected onInit() {\r\n    reaction(() => this.isChanged, value => {\r\n      console.log('The schema is', value ? 'changed' : 'not changed');\r\n    });\r\n  }\r\n}\r\n"},a={filename:"ChangedProperties.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\nimport { runInAction } from 'mobx';\r\n\r\nexport class ChangedPropertiesSchema extends FormSchema {\r\n  @watch prop1 = 1;\r\n\r\n  @watch prop2 = 2;\r\n}\r\n\r\nconst schema = ChangedPropertiesSchema.create();\r\n\r\nrunInAction(() => schema.prop1++);\r\nconsole.log(schema.changedProperties); // Set(['prop1']\r\n\r\nrunInAction(() => schema.prop2++);\r\nconsole.log(schema.changedProperties); // Set(['prop1', 'prop2']\r\n\r\nrunInAction(() => schema.prop1--);\r\nconsole.log(schema.changedProperties); // Set(['prop2']\r\n"},h={filename:"GetInitial.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\nimport { runInAction } from 'mobx';\r\n\r\nexport class GetInitialSchema extends FormSchema {\r\n  @watch prop1 = 1;\r\n\r\n  @watch prop2 = 2;\r\n}\r\n\r\nconst schema = GetInitialSchema.create();\r\n\r\nrunInAction(() => schema.prop1++);\r\nconsole.log(schema.getInitial('prop1')); // 1\r\n"},i={filename:"Sync.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\nimport { runInAction } from 'mobx';\r\n\r\nexport class SyncSchema extends FormSchema {\r\n  @watch prop1 = 1;\r\n\r\n  @watch prop2 = 2;\r\n}\r\n\r\nconst schema = SyncSchema.create();\r\n\r\nrunInAction(() => schema.prop1++);\r\nconsole.log(schema.isChanged, schema.prop1, schema.getInitial('prop1'));\r\n// true, 2, 1\r\n\r\nschema.sync();\r\nconsole.log(schema.isChanged, schema.prop1, schema.getInitial('prop1'));\r\n// false, 2, 2\r\n"},s={filename:"Reset.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\nimport { runInAction } from 'mobx';\r\n\r\nexport class ResetSchema extends FormSchema {\r\n  @watch prop1 = 1;\r\n\r\n  @watch prop2 = 2;\r\n}\r\n\r\nconst schema = ResetSchema.create();\r\n\r\nrunInAction(() => schema.prop1++);\r\nconsole.log(schema.isChanged, schema.prop1, schema.getInitial('prop1'));\r\n// true, 2, 1\r\n\r\nschema.reset();\r\nconsole.log(schema.isChanged, schema.prop1, schema.getInitial('prop1'));\r\n// false, 1, 1\r\n"},l={filename:"ManualProperty.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\n\r\nexport class ManualPropertySchema extends FormSchema {\r\n  @watch prop1 = 1;\r\n\r\n  @watch prop2 = 1;\r\n}\r\n\r\nconst schema = ManualPropertySchema.create({}, true);\r\n\r\nschema.prop1 = 100;\r\n// Will calculated changes only of prop1 property\r\nschema.updateIsPropertyChanged('prop1');\r\n"},m={filename:"Manual.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\n\r\nexport class ManualSchema extends FormSchema {\r\n  @watch prop1 = 1;\r\n\r\n  @watch prop2 = 1;\r\n}\r\n\r\nconst schema = ManualSchema.create({}, true);\r\n\r\nschema.prop1 = 100;\r\n// Will calculated changes both for of prop1 and prop2\r\nschema.updateIsValidAll();\r\n"},d=t(9928);let p=()=>(0,n.BX)(n.HY,{children:[(0,n.BX)(c.$0,{title:"Form Schema changes observation getters",children:[(0,n.BX)(c.$0,{title:(0,n.BX)(n.HY,{children:["Getter ",(0,n.tZ)(c.EK,{children:"isChanged"})]}),children:[(0,n.BX)(c.xv,{children:["Getter ",(0,n.tZ)(c.EK,{children:"isChanged"})," tells whether the entire schema is different from the initial state or not."]}),(0,n.BX)(c.bZ,{children:["If you don't use the ",(0,n.tZ)(c.EK,{children:"@watch"})," decorator, the ",(0,n.tZ)(c.EK,{children:"isChanged"})," value will not be updated."]}),(0,n.tZ)(c.xv,{children:"API reference:"}),(0,n.tZ)(c.oP,{className:d.Z.referenceHighlighter,code:"public get isChanged(): boolean;"}),(0,n.tZ)(c.$0,{title:"Example",children:(0,n.tZ)(c.KE,{items:[o]})})]}),(0,n.BX)(c.$0,{title:(0,n.BX)(n.HY,{children:["Getter ",(0,n.tZ)(c.EK,{children:"changedProperties"})]}),children:[(0,n.BX)(c.xv,{children:["Getter ",(0,n.tZ)(c.EK,{children:"changedProperties"})," returns the set of properties names which values are different from the initial state."]}),(0,n.BX)(c.bZ,{children:["If you don't use the ",(0,n.tZ)(c.EK,{children:"@watch"})," decorator, the ",(0,n.tZ)(c.EK,{children:"changedProperties"})," value will not be updated."]}),(0,n.tZ)(c.xv,{children:"API reference:"}),(0,n.tZ)(c.oP,{code:"public get changedProperties(): Set<keyof ExcludeFormSchema<this>>;",className:d.Z.referenceHighlighter}),(0,n.tZ)(c.$0,{title:"Example",children:(0,n.tZ)(c.KE,{items:[a]})})]})]}),(0,n.BX)(c.$0,{title:"Form Schema changes observation methods",children:[(0,n.BX)(c.$0,{title:(0,n.BX)(n.HY,{children:["Method ",(0,n.tZ)(c.EK,{children:"getInitial"})]}),children:[(0,n.BX)(c.xv,{children:["The ",(0,n.tZ)(c.EK,{children:"getInitial"})," method receives a name of a property and returns its value from the initial state."]}),(0,n.tZ)(c.xv,{children:"API reference:"}),(0,n.tZ)(c.oP,{code:"public getInitial(field: keyof ExcludeFormSchema<this>): this[typeof field];",className:d.Z.referenceHighlighter}),(0,n.tZ)(c.$0,{title:"Example",children:(0,n.tZ)(c.KE,{items:[h]})})]}),(0,n.BX)(c.$0,{title:(0,n.BX)(n.HY,{children:["Method ",(0,n.tZ)(c.EK,{children:"sync"})]}),children:[(0,n.BX)(c.xv,{children:["The ",(0,n.tZ)(c.EK,{children:"sync"})," method saves the current state of schema as initial."]}),(0,n.tZ)(c.xv,{children:"API reference:"}),(0,n.tZ)(c.oP,{className:d.Z.referenceHighlighter,code:"public sync(): void;"}),(0,n.tZ)(c.$0,{title:"Example",children:(0,n.tZ)(c.KE,{items:[i]})})]}),(0,n.BX)(c.$0,{title:(0,n.BX)(n.HY,{children:["Method ",(0,n.tZ)(c.EK,{children:"reset"})]}),children:[(0,n.BX)(c.xv,{children:["The ",(0,n.tZ)(c.EK,{children:"reset"})," method restore schema into the initial state."]}),(0,n.tZ)(c.xv,{children:"API reference:"}),(0,n.tZ)(c.oP,{className:d.Z.referenceHighlighter,code:"public reset(): void;"}),(0,n.tZ)(c.$0,{title:"Example",children:(0,n.tZ)(c.KE,{items:[s]})})]}),(0,n.BX)(c.$0,{title:(0,n.BX)(n.HY,{children:["Method ",(0,n.tZ)(c.EK,{children:"updateIsPropertyChanged"})]}),children:[(0,n.BX)(c.xv,{children:["The ",(0,n.tZ)(c.EK,{children:"updateIsPropertyChanged"})," method is used to calculate if the desired property is different from the initial state and update the ",(0,n.tZ)(c.EK,{children:"changedProperties"})," and the ",(0,n.tZ)(c.EK,{children:"isChanged"})," values in manual mode."]}),(0,n.BX)(c.bZ,{children:["Even though the ",(0,n.tZ)(c.EK,{children:"updateIsPropertyChanged"})," method should work in manual mode, you still have to make your properties observable by using the ",(0,n.tZ)(c.EK,{children:"@watch"})," decorator or its modifiers."]}),(0,n.tZ)(c.xv,{children:"API reference:"}),(0,n.tZ)(c.oP,{code:"public updateIsPropertyChanged(propertyName: keyof ExcludeFormSchema<this>): boolean;",className:d.Z.referenceHighlighter}),(0,n.tZ)(c.$0,{title:"Example",children:(0,n.tZ)(c.KE,{items:[l]})})]}),(0,n.BX)(c.$0,{title:(0,n.BX)(n.HY,{children:["Method ",(0,n.tZ)(c.EK,{children:"updateIsChangedAny"})]}),children:[(0,n.BX)(c.xv,{children:["The ",(0,n.tZ)(c.EK,{children:"updateIsChangedAny"})," method is used to calculate all the changes in the schema and update the ",(0,n.tZ)(c.EK,{children:"changedProperties"})," and the ",(0,n.tZ)(c.EK,{children:"isChanged"})," values in manual mode."]}),(0,n.BX)(c.bZ,{children:["Even though the ",(0,n.tZ)(c.EK,{children:"updateIsChangedAny"})," method should work in manual mode, you still have to make your properties observable by using the ",(0,n.tZ)(c.EK,{children:"@watch"})," decorator or its modifiers."]}),(0,n.tZ)(c.xv,{children:"API reference:"}),(0,n.tZ)(c.oP,{code:"public updateIsChangedAny(): boolean;",className:d.Z.referenceHighlighter}),(0,n.tZ)(c.$0,{title:"Example",children:(0,n.tZ)(c.KE,{items:[m]})})]})]})]});var u=p}}]);