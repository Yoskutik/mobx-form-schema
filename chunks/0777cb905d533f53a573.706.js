"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[706],{9928:function(e,r){r.Z={page:"RlzX",link:"vzUU",referenceHighlighter:"ug4B"}},1706:function(e,r,t){t.r(r),t.d(r,{default:function(){return s}});var a=t(8993),n=t(1568),o={filename:"Errors.ts",code:"import { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\nimport { reaction } from 'mobx';\r\n\r\nconst prop1 = () => (value: number) => {\r\n  if (value > 10) return false;\r\n  return 'Prop1 must be greater than 10';\r\n};\r\n\r\nexport class ErrorsSchema extends FormSchema {\r\n  @validate(prop1())\r\n  @watch prop1 = 1;\r\n\r\n  protected onInit() {\r\n    reaction(() => this.errors.prop1, error => {\r\n      console.log('prop1 is', !error ? 'valid' : 'not valid');\r\n      if (error) {\r\n        console.log('prop1 error:', error);\r\n      }\r\n    });\r\n  }\r\n}\r\n"},l={filename:"IsValid.ts",code:"import { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\nimport { reaction } from 'mobx';\r\n\r\nconst prop1 = () => (value: number) => {\r\n  if (value > 10) return false;\r\n  return 'Prop1 must be greater than 10';\r\n};\r\n\r\nexport class IsValidSchema extends FormSchema {\r\n  @validate(prop1())\r\n  @watch prop1 = 1;\r\n\r\n  protected onInit() {\r\n    reaction(() => this.isValid, value => {\r\n      console.log('The schema is', value ? 'valid' : 'not valid');\r\n    });\r\n  }\r\n}\r\n"},i={filename:"ManualProperty.ts",code:"import { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\n\r\nexport class ManualPropertySchema extends FormSchema {\r\n  @validate(value => value > 10)\r\n  @watch prop1 = 1;\r\n\r\n  @validate(value => value > 20)\r\n  @watch prop2 = 1;\r\n}\r\n\r\nconst schema = ManualPropertySchema.create({}, true);\r\n\r\nschema.prop1 = 100;\r\n// Will update schema.errors.prop1 and schema.isValid\r\nschema.updateIsPropertyValid('prop1');\r\n\r\nschema.prop2 = -100;\r\n// Will update schema.errors.prop1 and schema.isValid\r\nschema.updateIsPropertyValid('prop2');\r\n"},c={filename:"Manual.ts",code:"import { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\n\r\nexport class ManualSchema extends FormSchema {\r\n  @validate(value => value > 10)\r\n  @watch prop1 = 1;\r\n\r\n  @validate(value => value > 20)\r\n  @watch prop2 = 1;\r\n}\r\n\r\nconst schema = ManualSchema.create({}, true);\r\n\r\nschema.prop1 = 100;\r\nschema.prop2 = -100;\r\n// Will update schema.errors.prop1, schema.errors.prop2 and schema.isValid\r\nschema.updateIsValidAll();\r\n"},h=t(9928);let d=()=>(0,a.BX)(a.HY,{children:[(0,a.BX)(n.$0,{title:"Form Schema's validity getters",children:[(0,a.BX)(n.$0,{title:(0,a.BX)(a.HY,{children:["Getter ",(0,a.tZ)(n.EK,{children:"isValid"})]}),children:[(0,a.BX)(n.xv,{children:["Getter ",(0,a.tZ)(n.EK,{children:"isValid"})," tells whether the entire schema is valid or not."]}),(0,a.BX)(n.bZ,{children:["If you don't use the ",(0,a.tZ)(n.EK,{children:"@validate"})," decorator, the ",(0,a.tZ)(n.EK,{children:"isValid"})," value will not be updated."]}),(0,a.tZ)(n.xv,{children:"API reference:"}),(0,a.tZ)(n.oP,{className:h.Z.referenceHighlighter,code:"public get isValid(): boolean;"}),(0,a.tZ)(n.$0,{title:"Example",children:(0,a.tZ)(n.KE,{items:[l]})})]}),(0,a.BX)(n.$0,{title:(0,a.BX)(a.HY,{children:["Getter ",(0,a.tZ)(n.EK,{children:"errors"})]}),children:[(0,a.BX)(n.xv,{children:["Getter ",(0,a.tZ)(n.EK,{children:"errors"})," returns all the errors in a schema. The ",(0,a.tZ)(n.EK,{children:"errors"})," getter returns an object whose keys have the same names as the properties. The value of the returned object can be a string or a boolean. If the property is valid, there won't be such a key in the object. If the property is not valid, the ",(0,a.tZ)(n.EK,{children:"errors"})," object will return the error from its validation rules."]}),(0,a.BX)(n.bZ,{children:["If you don't use the ",(0,a.tZ)(n.EK,{children:"@validate"})," decorator, the ",(0,a.tZ)(n.EK,{children:"errors"})," value will not be updated."]}),(0,a.tZ)(n.xv,{children:"API reference:"}),(0,a.tZ)(n.oP,{code:"public get errors(): ExcludedFormSchemaKeyToValue<this, string | true>;",className:h.Z.referenceHighlighter}),(0,a.tZ)(n.$0,{title:"Example",children:(0,a.tZ)(n.KE,{items:[o]})})]})]}),(0,a.BX)(n.$0,{title:"Form Schema's validity methods",children:[(0,a.BX)(n.$0,{title:(0,a.BX)(a.HY,{children:[(0,a.tZ)(n.EK,{children:"updateIsPropertyValid"})," method"]}),children:[(0,a.BX)(n.xv,{children:["The ",(0,a.tZ)(n.EK,{children:"updateIsPropertyValid"})," method is used to calculate and update a property's validation in manual mode. If you didn't create your schema in manual mode, you don't have to call it. After you call this function, the ",(0,a.tZ)(n.EK,{children:"errors"})," object is updated for a desired property, as is the ",(0,a.tZ)(n.EK,{children:"isValid"})," getter."]}),(0,a.BX)(n.bZ,{children:["Even though ",(0,a.tZ)(n.EK,{children:"updateIsPropertyValid"})," method should work in manual mode, you still have to make your properties observable by using the ",(0,a.tZ)(n.EK,{children:"@watch"})," decorator or the ",(0,a.tZ)(n.EK,{children:"makeObservable"})," function from the MobX package."]}),(0,a.tZ)(n.xv,{children:"API reference:"}),(0,a.tZ)(n.oP,{code:"public updateIsPropertyValid(propertyName: keyof ExcludeFormSchema<this>): string | boolean;",className:h.Z.referenceHighlighter}),(0,a.tZ)(n.$0,{title:"Example",children:(0,a.tZ)(n.KE,{items:[i]})})]}),(0,a.BX)(n.$0,{title:(0,a.BX)(a.HY,{children:[(0,a.tZ)(n.EK,{children:"updateIsValidAll"})," method"]}),children:[(0,a.BX)(n.xv,{children:["The ",(0,a.tZ)(n.EK,{children:"updateIsValidAll"})," method is used to calculate and update the entire schema's validation in the manual mode. If you didn't create your schema in manual mode, you don't have to call it. After you call this function, the ",(0,a.tZ)(n.EK,{children:"errors"})," and the ",(0,a.tZ)(n.EK,{children:"isValid"})," values will be updated."]}),(0,a.BX)(n.bZ,{children:["Even though ",(0,a.tZ)(n.EK,{children:"updateIsValidAll"})," method should work in manual mode, you still have to make your properties observable by using the ",(0,a.tZ)(n.EK,{children:"@watch"})," decorator or the ",(0,a.tZ)(n.EK,{children:"makeObservable"})," function from the MobX package."]}),(0,a.tZ)(n.xv,{children:"API reference:"}),(0,a.tZ)(n.oP,{code:"public updateIsValidAll(): string | boolean;",className:h.Z.referenceHighlighter}),(0,a.tZ)(n.$0,{title:"Example",children:(0,a.tZ)(n.KE,{items:[c]})})]})]})]});var s=d}}]);