"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[218],{2218:function(e,r,t){t.r(r),t.d(r,{default:function(){return b}});var n=t(8993),a=t(1568),o=t(7974),i={filename:"BasicExample.tsx",code:"import { observer } from 'mobx-react';\r\nimport { useMemo } from 'react';\r\nimport { TextField } from '@components';\r\nimport { SchemaObservationInfo } from '../SchemaObservationInfo';\r\nimport { ObservationButtons } from '../ObservationButtons';\r\nimport { BasicSchema } from './BasicSchema';\r\n\r\nexport const BasicExample = observer(() => {\r\n  const schema = useMemo(() => BasicSchema.create(), []);\r\n\r\n  const handleSaveClick = () => {\r\n    schema.sync();\r\n  };\r\n\r\n  const handleRestoreClick = () => {\r\n    schema.reset();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField schema={schema} field=\"name\" label=\"Name\" />\r\n      <TextField schema={schema} field=\"surname\" label=\"Surname\" />\r\n\r\n      <ObservationButtons\r\n        onRestore={handleRestoreClick}\r\n        onSave={handleSaveClick}\r\n        schema={schema}\r\n      />\r\n\r\n      <SchemaObservationInfo schema={schema} />\r\n    </div>\r\n  );\r\n});\r\n"},s={filename:"BasicSchema.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\n\r\nexport class BasicSchema extends FormSchema {\r\n  @watch name = 'Joe';\r\n\r\n  @watch surname = 'Dough';\r\n}\r\n"},c={filename:"SameSchema1.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\nimport { makeObservable, observable } from 'mobx';\r\n\r\nexport class SameSchema1 extends FormSchema {\r\n  @watch @observable data = {\r\n    prop1: 1,\r\n    prop2: 2,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    makeObservable(this);\r\n  }\r\n}\r\n"},l={filename:"SameSchema2.ts",code:"import { FormSchema, watch } from '@yoskutik/mobx-form-schema';\r\nimport { makeObservable, observable } from 'mobx';\r\n\r\nexport class SameSchema1 extends FormSchema {\r\n  @watch data = {\r\n    prop1: 1,\r\n    prop2: 2,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    makeObservable(this, {\r\n      data: observable,\r\n    });\r\n  }\r\n}\r\n"},m=t(4309),h=t(8379),d=t(4133),u=t(858),f=t(4831);let p=(0,m.Pi)(()=>{let e=(0,h.useMemo)(()=>f.d.create(),[]),r=()=>{e.sync()},t=()=>{e.reset()};return(0,n.BX)("div",{children:[(0,n.tZ)(a.nv,{schema:e,field:"name",label:"Name"}),(0,n.tZ)(a.nv,{schema:e,field:"surname",label:"Surname"}),(0,n.tZ)(u.A,{onRestore:t,onSave:r,schema:e}),(0,n.tZ)(d.E,{schema:e})]})}),v=()=>(0,n.BX)(n.HY,{children:[(0,n.BX)(a.$0,{title:"Form changes observation",children:[(0,n.tZ)(a.xv,{children:"Form observation can be very useful. The most basic example is understanding whether your current state of the form is different from the initial one, in case you don't want to send an API request and want to disable the submit button."}),(0,n.BX)(a.$0,{title:"The power of observation",children:[(0,n.tZ)(a.xv,{children:"Here's a full list of features that MobX Form Schema provides:"}),(0,n.BX)(a.aV,{children:[(0,n.tZ)("li",{children:"You can understand whether the form is different from the initial state;"}),(0,n.tZ)("li",{children:"You can retrieve a list of properties' names that are different from the initial state;"}),(0,n.tZ)("li",{children:"You can retrieve the property's value from the initial state;"}),(0,n.tZ)("li",{children:"You can restore the whole schema into the initial state;"}),(0,n.tZ)("li",{children:"And also, you can save the current state as the initial one."})]}),(0,n.BX)(a.xv,{children:["To enable form data observation, you have to apply ",(0,n.tZ)(a.EK,{children:"@watch"})," decorators to the properties you want to observe."]}),(0,n.BX)(a.bZ,{children:[(0,n.tZ)(a.EK,{children:"@watch"})," decorator works well if you observe primitive values, like stings, numbers or boolean values. In case you want to observe complex objects, you have to use ",(0,n.tZ)(a.EK,{children:"watch"})," modifiers, which will be described in the next article."]}),(0,n.BX)(a.xv,{children:["In the short example below, you can see the most basic observation functionality. You try clicking ",(0,n.tZ)("i",{children:'"Save"'})," and ",(0,n.tZ)("i",{children:'"Restore"'})," buttons for better understanding how does it work."]}),(0,n.tZ)(a.KE,{items:[s,i,o.Z],children:(0,n.tZ)(p,{})})]}),(0,n.tZ)(a.$0,{title:"How does it check changes?",children:(0,n.BX)(a.xv,{children:["Form schema saves the initial state, and after each change in a property, checks whether the new property's value different from the one in the initial state. If you use plain ",(0,n.tZ)(a.EK,{children:"@watch"})," decorator, there will be reference comparison (via ",(0,n.tZ)(a.EK,{children:"==="})," operator)."]})}),(0,n.BX)(a.$0,{title:"How does watch decorator make property observable?",children:[(0,n.BX)(a.xv,{children:["By default, if you apply ",(0,n.tZ)(a.EK,{children:"@watch"})," decorator to a property, it will automatically apply ",(0,n.tZ)(a.EK,{children:"@observable.ref"})," decorator from MobX. Therefore, in most cases if you use",(0,n.tZ)(a.EK,{children:"@watch"})," decorator, you don't have to use decorators from MobX."]}),(0,n.BX)(a.xv,{children:["But you can freely do it. If, for some reason, you have to compare different objects via their reference, but these objects have to be decorated with ",(0,n.tZ)(a.EK,{children:"@observable"}),", you can do it."]}),(0,n.tZ)(a.KE,{items:[c,l]})]}),(0,n.BX)(a.$0,{title:"Should you use watch decorator?",children:[(0,n.tZ)(a.xv,{children:"As you may have guessed when using it, MobX Form Schema has to save the initial data of the form, which means that memory consumption will grow. And also, each time the observed property changes, there will be a recalculation to understand whether the current property's value is different from the initial one."}),(0,n.BX)(a.xv,{children:["But in general, those additional computational loads and memory consumption are low because of MobX's and MobX Form Schema's optimizations. So, you shouldn't worry about using ",(0,n.tZ)(a.EK,{children:"@watch"})," decorators, especially if you have a need to observe form data."]})]})]}),(0,n.tZ)(a.$0,{title:"Next",forcedLevel:3,children:(0,n.tZ)(a.xv,{children:"In this section you saw how to observe primitive data. In the next article you'll find out how to configure your form schema in order to use arrays, sets or nested schemas."})})]});var b=v},4831:function(e,r,t){let n,a,o,i,s,c;t.d(r,{d:function(){return u}});var l,m=t(8816),h=function(e,r,t,n,a,o){function i(e){if(void 0!==e&&"function"!=typeof e)throw TypeError("Function expected");return e}for(var s,c=n.kind,l="getter"===c?"get":"setter"===c?"set":"value",m=!r&&e?n.static?e:e.prototype:null,h=r||(m?Object.getOwnPropertyDescriptor(m,n.name):{}),d=!1,u=t.length-1;u>=0;u--){var f={};for(var p in n)f[p]="access"===p?{}:n[p];for(var p in n.access)f.access[p]=n.access[p];f.addInitializer=function(e){if(d)throw TypeError("Cannot add initializers after decoration has completed");o.push(i(e||null))};var v=(0,t[u])("accessor"===c?{get:h.get,set:h.set}:h[l],f);if("accessor"===c){if(void 0===v)continue;if(null===v||"object"!=typeof v)throw TypeError("Object expected");(s=i(v.get))&&(h.get=s),(s=i(v.set))&&(h.set=s),(s=i(v.init))&&a.unshift(s)}else(s=i(v))&&("field"===c?a.unshift(s):h[l]=s)}m&&Object.defineProperty(m,n.name,h),d=!0},d=function(e,r,t){for(var n=arguments.length>2,a=0;a<r.length;a++)t=n?r[a].call(e,t):r[a].call(e);return n?t:void 0};let u=(o=m.FormSchema,i=[],s=[],c=[],l=class extends o{constructor(){super(...arguments),this.name=(d(this,i),d(this,s,"Joe")),this.surname=d(this,c,"Dough")}},(()=>{var e;let r="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(e=o[Symbol.metadata])&&void 0!==e?e:null):void 0;n=[m.watch],a=[m.watch],h(null,null,n,{kind:"field",name:"name",static:!1,private:!1,access:{has:e=>"name"in e,get:e=>e.name,set:(e,r)=>{e.name=r}},metadata:r},s,i),h(null,null,a,{kind:"field",name:"surname",static:!1,private:!1,access:{has:e=>"surname"in e,get:e=>e.surname,set:(e,r)=>{e.surname=r}},metadata:r},c,i),r&&Object.defineProperty(l,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:r})})(),l)},858:function(e,r,t){t.d(r,{A:function(){return i}});var n=t(8993),a=t(4309),o=t(1568);let i=(0,a.Pi)(({schema:e,onRestore:r,onSave:t})=>(0,n.BX)("div",{style:{marginTop:12},children:[(0,n.tZ)(o.zx,{variant:"primary",onClick:t,disabled:!e.isChanged,children:"Save"}),(0,n.tZ)(o.zx,{onClick:r,disabled:!e.isChanged,style:{marginLeft:12},variant:"primary",children:"Restore"})]}))},4133:function(e,r,t){t.d(r,{E:function(){return s}});var n=t(8993),a=t(4309),o=t(75),i={root:"HQPJ",pre:"gwvf",preItem:"FVu9"};let s=(0,a.Pi)(({schema:e})=>{let r=e=>{let r=(0,o.ZN)(e);return JSON.stringify(r instanceof Set?[...r]:r,void 0,2)};return(0,n.BX)("div",{className:i.root,children:[(0,n.BX)("span",{children:["Is form changed: ",e.isChanged.toString()]}),(0,n.BX)("div",{className:i.pre,children:["Changed properties: ",r(e.changedProperties)]}),(0,n.BX)("div",{className:i.pre,children:["Initial properties properties:",Object.keys(e).map(t=>(0,n.BX)("div",{className:i.preItem,children:[t,": ",r(e.getInitial(t))]},t))]})]})})},7974:function(e,r){r.Z={filename:"SchemaObservationInfo.tsx",code:"import { FormSchema } from '@yoskutik/mobx-form-schema';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport styles from './SchemaObservationInfo.module.scss';\r\n\r\ntype Props<T extends FormSchema> = {\r\n  schema: T;\r\n};\r\n\r\nexport const SchemaObservationInfo = observer(<T extends FormSchema>({ schema }: Props<T>) => {\r\n  const stringify = (data: unknown) => {\r\n    const jsData = toJS(data);\r\n    return JSON.stringify(jsData instanceof Set ? [...jsData] : jsData, undefined, 2);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <span>Is form changed: {schema.isChanged.toString()}</span>\r\n\r\n      <div className={styles.pre}>\r\n        Changed properties: {stringify(schema.changedProperties)}\r\n      </div>\r\n\r\n      <div className={styles.pre}>\r\n        Initial properties properties:\r\n        {Object.keys(schema).map(property => (\r\n          <div className={styles.preItem} key={property}>\r\n            {property}: {stringify(schema.getInitial(property as any))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n"}}}]);