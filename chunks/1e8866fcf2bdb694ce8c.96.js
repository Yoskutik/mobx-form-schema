"use strict";(self.webpackChunk_yoskutik_mobx_form_schema_docs=self.webpackChunk_yoskutik_mobx_form_schema_docs||[]).push([[96],{4105:function(e,r,t){t.d(r,{C1:function(){return a},Do:function(){return i},Ei:function(){return o},b6:function(){return n}});let a=()=>e=>(null==e||!e.trim())&&"This field is required.",i=()=>e=>!/\S+@\S+\.\S+/.test(e)&&"Invalid email format.",n=()=>e=>!/^[a-zA-Z0-9_]+$/.test(e)&&"You can use only latin letters, digits and underscore sign.",o=e=>r=>r.length<e&&`Should be at least ${e} characters.`},1096:function(e,r,t){let a,i,n;t.r(r),t.d(r,{default:function(){return Z}});var o,l=t(8993),s=t(1568),c={filename:"validators.ts",code:"export const required = () => (value?: string) => {\r\n  if (value?.trim()) return false;\r\n  return 'This field is required.';\r\n};\r\n\r\nexport const email = () => (value: string) => {\r\n  if (/\\S+@\\S+\\.\\S+/.test(value)) return false;\r\n  return 'Invalid email format.';\r\n};\r\n\r\nexport const username = () => (value: string) => {\r\n  if (/^[a-zA-Z0-9_]+$/.test(value)) return false;\r\n  return 'You can use only latin letters, digits and underscore sign.';\r\n};\r\n\r\nexport const minLength = (min: number) => (value: string) => {\r\n  if (value.length < min) return `Should be at least ${min} characters.`;\r\n  return false;\r\n};\r\n"},d={filename:"SameExample.tsx",code:"import { observer } from 'mobx-react';\r\nimport { useMemo } from 'react';\r\nimport { TextField } from '@components';\r\nimport { SameSchema1 } from './SameSchema1';\r\n\r\nexport const SameExample = observer(() => {\r\n  const schema = useMemo(() => SameSchema1.create(), []);\r\n\r\n  return (\r\n    <div>\r\n      <TextField schema={schema} field=\"email\" type=\"email\" required label=\"E-mail\" />\r\n      <span>Is form valid: {schema.isValid.toString()}</span>\r\n      <pre style={{ whiteSpace: 'pre-wrap' }}>\r\n        Form errors: {JSON.stringify(schema.errors, undefined, 2)}\r\n      </pre>\r\n    </div>\r\n  );\r\n});\r\n"},m={filename:"SameSchema1.ts",code:"import { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\nimport { email, required } from '../../LearnStartPage/validators';\r\n\r\nexport class SameSchema1 extends FormSchema {\r\n  @validate(required(), email())\r\n  @watch email = '';\r\n}\r\n"},h={filename:"SameSchema2.ts",code:"import { observable } from 'mobx';\r\nimport { FormSchema, validate, watch } from '@yoskutik/mobx-form-schema';\r\nimport { email, required } from '../../LearnStartPage/validators';\r\n\r\nexport class SameSchema2 extends FormSchema {\r\n  @validate(required(), email())\r\n  @observable email = '';\r\n}\r\n"},u={filename:"SameSchema3.ts",code:"import { makeObservable, observable } from 'mobx';\r\nimport { FormSchema, validate } from '@yoskutik/mobx-form-schema';\r\nimport { email, required } from '../../LearnStartPage/validators';\r\n\r\nexport class SameSchema3 extends FormSchema {\r\n  @validate(required(), email())\r\n  email = '';\r\n\r\n  constructor() {\r\n    super();\r\n    makeObservable(this, {\r\n      email: observable,\r\n    });\r\n  }\r\n}\r\n"},f=t(4309),p=t(8379),v=t(8816),b=t(4105),y=function(e,r,t,a,i,n){function o(e){if(void 0!==e&&"function"!=typeof e)throw TypeError("Function expected");return e}for(var l,s=a.kind,c="getter"===s?"get":"setter"===s?"set":"value",d=!r&&e?a.static?e:e.prototype:null,m=r||(d?Object.getOwnPropertyDescriptor(d,a.name):{}),h=!1,u=t.length-1;u>=0;u--){var f={};for(var p in a)f[p]="access"===p?{}:a[p];for(var p in a.access)f.access[p]=a.access[p];f.addInitializer=function(e){if(h)throw TypeError("Cannot add initializers after decoration has completed");n.push(o(e||null))};var v=(0,t[u])("accessor"===s?{get:m.get,set:m.set}:m[c],f);if("accessor"===s){if(void 0===v)continue;if(null===v||"object"!=typeof v)throw TypeError("Object expected");(l=o(v.get))&&(m.get=l),(l=o(v.set))&&(m.set=l),(l=o(v.init))&&i.unshift(l)}else(l=o(v))&&("field"===s?i.unshift(l):m[c]=l)}d&&Object.defineProperty(d,a.name,m),h=!0},S=function(e,r,t){for(var a=arguments.length>2,i=0;i<r.length;i++)t=a?r[i].call(e,t):r[i].call(e);return a?t:void 0};let g=(a=v.FormSchema,i=[],n=[],o=class extends a{constructor(){super(...arguments),this.email=(S(this,i),S(this,n,""))}},(()=>{var e;let r="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(e=a[Symbol.metadata])&&void 0!==e?e:null):void 0;y(null,null,[(0,v.validate)((0,b.C1)(),(0,b.Do)()),v.watch],{kind:"field",name:"email",static:!1,private:!1,access:{has:e=>"email"in e,get:e=>e.email,set:(e,r)=>{e.email=r}},metadata:r},n,i),r&&Object.defineProperty(o,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:r})})(),o),w=(0,f.Pi)(()=>{let e=(0,p.useMemo)(()=>g.create(),[]);return(0,l.BX)("div",{children:[(0,l.tZ)(s.nv,{schema:e,field:"email",type:"email",required:!0,label:"E-mail"}),(0,l.BX)("span",{children:["Is form valid: ",e.isValid.toString()]}),(0,l.BX)("pre",{style:{whiteSpace:"pre-wrap"},children:["Form errors: ",JSON.stringify(e.errors,void 0,2)]})]})}),x=()=>(0,l.BX)(l.HY,{children:[(0,l.BX)(s.$0,{title:"Basic validation",children:[(0,l.tZ)(s.xv,{children:"MobX Form Schema provides great opportunities for form validation. And in this article we'll show you all you can do with the library."}),(0,l.BX)(s.$0,{title:"Writting validation rules",children:[(0,l.tZ)(s.xv,{children:"Unlike other JavaScript libraries that provide the ability to configure form validation, MobX Form Schema doesn't provide any validation rules. There are several reasons for that:"}),(0,l.BX)(s.aV,{children:[(0,l.tZ)("li",{children:"Validation rules may differ in different projects. For example, validation for email field may depend on a country for which you are developing your application. Therefore, if there are any rules delivered out of the box, there also must be an opportunity to overload them."}),(0,l.tZ)("li",{children:"Some applications may be multilingual, and with the rules out of the box, we would have to provide some functionality to overload the way of translating error messages."}),(0,l.tZ)("li",{children:"And what is most the important is that writing validation rules from the scratch can be extremely easy."})]}),(0,l.BX)(s.xv,{children:["In MobX Form Schema validation rule is a function, that returns a ",(0,l.tZ)("b",{children:"boolean"})," or a ",(0,l.tZ)("b",{children:"string"}),"."]}),(0,l.BX)(s.aV,{children:[(0,l.BX)("li",{children:["If such a function returns ",(0,l.tZ)(s.EK,{children:"false"}),", the validation rule is considered passed."]}),(0,l.tZ)("li",{children:"If it returns a string, validation is considered not passed, and the string's value is considered to be an error message for the field."}),(0,l.BX)("li",{children:["If it returns ",(0,l.tZ)(s.EK,{children:"true"}),", there's no error message, but validation is not passed."]})]}),(0,l.tZ)(s.KE,{items:[c]})]}),(0,l.BX)(s.$0,{title:"Validation example",children:[(0,l.BX)(s.xv,{children:["To apply validation rules to a property, you must use ",(0,l.tZ)(s.EK,{children:"@validation"})," decorator."]}),(0,l.BX)(s.xv,{children:["By default, all the validation in MobX Form Schema works only if a property in a class is observable. You can use ",(0,l.tZ)(s.EK,{children:"makeObservable"})," function or ",(0,l.tZ)(s.EK,{children:"@observable"}),"decorators from MobX to make them observable. Also, you can use ",(0,l.tZ)(s.EK,{children:"@watch"})," decorator from this library, but be aware that using ",(0,l.tZ)(s.EK,{children:"@watch"})," decorators enables functionality for observing form changes."]}),(0,l.BX)(s.xv,{children:["You can pass several rules into each property. In the example below, validation from ",(0,l.tZ)(s.EK,{children:"email()"})," validator will be checked only after validation from ",(0,l.tZ)(s.EK,{children:"@required"})," is passed."]}),(0,l.tZ)(s.KE,{items:[m,h,u]})]}),(0,l.BX)(s.$0,{title:"Retrieving error message",children:[(0,l.BX)(s.xv,{children:["All the errors of a schema are contained in ",(0,l.tZ)(s.EK,{children:"errors"})," property. If you want to understand whether specific property is valid or not you can see ",(0,l.tZ)(s.EK,{children:"<schema>.errors.<propertyName>"}),"."]}),(0,l.tZ)(s.KE,{items:[m,d,s.yH,s.Pe],children:(0,l.tZ)(w,{})})]}),(0,l.tZ)(s.$0,{title:"How does it update?",children:(0,l.BX)(s.xv,{children:["The validation in MobX Form Schema is applied using ",(0,l.tZ)(s.EK,{children:"autorun"})," function from MobX. Therefore, when any observable property that is used in a function is changed, the validation will be recalculated. Basically it means, that every time a property from a schema is changed its validation will be recalculated."]})})]}),(0,l.tZ)(s.$0,{title:"Next",forcedLevel:3,children:(0,l.tZ)(s.xv,{children:"See how does how does work validation which depends on several properties, and how does conditional validation works in further sections."})})]});var Z=x}}]);